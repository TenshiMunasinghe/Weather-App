/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/weather": {
    /** Access current weather data for any location on Earth including over 200,000 cities! Current weather is frequently updated based on global models and data from more than 40,000 weather stations. */
    get: operations["CurrentWeatherData"];
  };
}

export interface components {
  schemas: {
    /** Successful response */
    "200": {
      coord?: components["schemas"]["Coord"];
      /** @description (more info Weather condition codes) */
      weather?: components["schemas"]["Weather"][];
      /**
       * @description Internal parameter
       * @example cmc stations
       */
      base?: string;
      main?: components["schemas"]["Main"];
      /**
       * @description Visibility, meter
       * @example 16093
       */
      visibility?: number;
      wind?: components["schemas"]["Wind"];
      clouds?: components["schemas"]["Clouds"];
      rain?: components["schemas"]["Rain"];
      snow?: components["schemas"]["Snow"];
      /**
       * Format: int32
       * @description Time of data calculation, unix, UTC
       * @example 1435658272
       */
      dt?: number;
      sys?: components["schemas"]["Sys"];
      /**
       * Format: int32
       * @description City ID
       * @example 2172797
       */
      id?: number;
      /** @example Cairns */
      name?: string;
      /**
       * Format: int32
       * @description Internal parameter
       * @example 200
       */
      cod?: number;
    };
    /** Coord */
    Coord: {
      /**
       * @description City geo location, longitude
       * @example 145.77
       */
      lon?: number;
      /**
       * @description City geo location, latitude
       * @example -16.92
       */
      lat?: number;
    };
    /** Weather */
    Weather: {
      /**
       * Format: int32
       * @description Weather condition id
       * @example 803
       */
      id?: number;
      /**
       * @description Group of weather parameters (Rain, Snow, Extreme etc.)
       * @example Clouds
       */
      main?: string;
      /**
       * @description Weather condition within the group
       * @example broken clouds
       */
      description?: string;
      /**
       * @description Weather icon id
       * @example 04n
       */
      icon?: string;
    };
    /** Main */
    Main: {
      /**
       * @description Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.
       * @example 293.25
       */
      temp?: number;
      /**
       * Format: int32
       * @description Atmospheric pressure (on the sea level, if there is no sea_level or grnd_level data), hPa
       * @example 1019
       */
      pressure?: number;
      /**
       * Format: int32
       * @description Humidity, %
       * @example 83
       */
      humidity?: number;
      /**
       * @description Minimum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.
       * @example 289.82
       */
      temp_min?: number;
      /**
       * @description Maximum temperature at the moment. This is deviation from current temp that is possible for large cities and megalopolises geographically expanded (use these parameter optionally). Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit.
       * @example 295.37
       */
      temp_max?: number;
      /**
       * @description Atmospheric pressure on the sea level, hPa
       * @example 984
       */
      sea_level?: number;
      /**
       * @description Atmospheric pressure on the ground level, hPa
       * @example 990
       */
      grnd_level?: number;
    };
    /** Wind */
    Wind: {
      /**
       * @description Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour.
       * @example 5.1
       */
      speed?: number;
      /**
       * Format: int32
       * @description Wind direction, degrees (meteorological)
       * @example 150
       */
      deg?: number;
    };
    /** Clouds */
    Clouds: {
      /**
       * Format: int32
       * @description Cloudiness, %
       * @example 75
       */
      all?: number;
    };
    /** Rain */
    Rain: {
      /**
       * Format: int32
       * @description Rain volume for the last 3 hours
       * @example 3
       */
      "3h"?: number;
    };
    /** Snow */
    Snow: {
      /**
       * @description Snow volume for the last 3 hours
       * @example 6
       */
      "3h"?: number;
    };
    /** Sys */
    Sys: {
      /**
       * Format: int32
       * @description Internal parameter
       * @example 1
       */
      type?: number;
      /**
       * Format: int32
       * @description Internal parameter
       * @example 8166
       */
      id?: number;
      /**
       * @description Internal parameter
       * @example 0.0166
       */
      message?: number;
      /**
       * @description Country code (GB, JP etc.)
       * @example AU
       */
      country?: string;
      /**
       * Format: int32
       * @description Sunrise time, unix, UTC
       * @example 1435610796
       */
      sunrise?: number;
      /**
       * Format: int32
       * @description Sunset time, unix, UTC
       * @example 1435650870
       */
      sunset?: number;
    };
  };
  parameters: {
    /** @description **City name**. *Example: London*. You can call by city name, or by city name and country code. The API responds with a list of results that match a searching word. For the query value, type the city name and optionally the country code divided by comma; use ISO 3166 country codes. */
    q: string;
    /** @description **City ID**. *Example: `2172797`*. You can call by city ID. API responds with exact result. The List of city IDs can be downloaded [here](http://bulk.openweathermap.org/sample/). You can include multiple cities in parameter &mdash; just separate them by commas. The limit of locations is 20. *Note: A single ID counts as a one API call. So, if you have city IDs. it's treated as 3 API calls.* */
    id: string;
    /** @description **Latitude**. *Example: 35*. The latitude cordinate of the location of your interest. Must use with `lon`. */
    lat: string;
    /** @description **Longitude**. *Example: 139*. Longitude cordinate of the location of your interest. Must use with `lat`. */
    lon: string;
    /** @description **Zip code**. Search by zip code. *Example: 95050,us*. Please note if country is not specified then the search works for USA as a default. */
    zip: string;
    /** @description **Units**. *Example: imperial*. Possible values: `standard`, `metric`, and `imperial`. When you do not use units parameter, format is `standard` by default. */
    units: "standard" | "metric" | "imperial";
    /** @description **Language**. *Example: en*. You can use lang parameter to get the output in your language. We support the following languages that you can use with the corresponded lang values: Arabic - `ar`, Bulgarian - `bg`, Catalan - `ca`, Czech - `cz`, German - `de`, Greek - `el`, English - `en`, Persian (Farsi) - `fa`, Finnish - `fi`, French - `fr`, Galician - `gl`, Croatian - `hr`, Hungarian - `hu`, Italian - `it`, Japanese - `ja`, Korean - `kr`, Latvian - `la`, Lithuanian - `lt`, Macedonian - `mk`, Dutch - `nl`, Polish - `pl`, Portuguese - `pt`, Romanian - `ro`, Russian - `ru`, Swedish - `se`, Slovak - `sk`, Slovenian - `sl`, Spanish - `es`, Turkish - `tr`, Ukrainian - `ua`, Vietnamese - `vi`, Chinese Simplified - `zh_cn`, Chinese Traditional - `zh_tw`. */
    lang:
      | "ar"
      | "bg"
      | "ca"
      | "cz"
      | "de"
      | "el"
      | "en"
      | "fa"
      | "fi"
      | "fr"
      | "gl"
      | "hr"
      | "hu"
      | "it"
      | "ja"
      | "kr"
      | "la"
      | "lt"
      | "mk"
      | "nl"
      | "pl"
      | "pt"
      | "ro"
      | "ru"
      | "se"
      | "sk"
      | "sl"
      | "es"
      | "tr"
      | "ua"
      | "vi"
      | "zh_cn"
      | "zh_tw";
    /** @description **Mode**. *Example: html*. Determines format of response. Possible values are `xml` and `html`. If mode parameter is empty the format is `json` by default. */
    mode: "json" | "xml" | "html";
  };
}

export interface operations {
  /** Access current weather data for any location on Earth including over 200,000 cities! Current weather is frequently updated based on global models and data from more than 40,000 weather stations. */
  CurrentWeatherData: {
    parameters: {
      query: {
        /** **City name**. *Example: London*. You can call by city name, or by city name and country code. The API responds with a list of results that match a searching word. For the query value, type the city name and optionally the country code divided by comma; use ISO 3166 country codes. */
        q?: string;
        /** **City ID**. *Example: `2172797`*. You can call by city ID. API responds with exact result. The List of city IDs can be downloaded [here](http://bulk.openweathermap.org/sample/). You can include multiple cities in parameter &mdash; just separate them by commas. The limit of locations is 20. *Note: A single ID counts as a one API call. So, if you have city IDs. it's treated as 3 API calls.* */
        id?: string;
        /** **Latitude**. *Example: 35*. The latitude cordinate of the location of your interest. Must use with `lon`. */
        lat?: string;
        /** **Longitude**. *Example: 139*. Longitude cordinate of the location of your interest. Must use with `lat`. */
        lon?: string;
        /** **Zip code**. Search by zip code. *Example: 95050,us*. Please note if country is not specified then the search works for USA as a default. */
        zip?: string;
        /** **Units**. *Example: imperial*. Possible values: `standard`, `metric`, and `imperial`. When you do not use units parameter, format is `standard` by default. */
        units?: "standard" | "metric" | "imperial";
        /** **Language**. *Example: en*. You can use lang parameter to get the output in your language. We support the following languages that you can use with the corresponded lang values: Arabic - `ar`, Bulgarian - `bg`, Catalan - `ca`, Czech - `cz`, German - `de`, Greek - `el`, English - `en`, Persian (Farsi) - `fa`, Finnish - `fi`, French - `fr`, Galician - `gl`, Croatian - `hr`, Hungarian - `hu`, Italian - `it`, Japanese - `ja`, Korean - `kr`, Latvian - `la`, Lithuanian - `lt`, Macedonian - `mk`, Dutch - `nl`, Polish - `pl`, Portuguese - `pt`, Romanian - `ro`, Russian - `ru`, Swedish - `se`, Slovak - `sk`, Slovenian - `sl`, Spanish - `es`, Turkish - `tr`, Ukrainian - `ua`, Vietnamese - `vi`, Chinese Simplified - `zh_cn`, Chinese Traditional - `zh_tw`. */
        lang?:
          | "ar"
          | "bg"
          | "ca"
          | "cz"
          | "de"
          | "el"
          | "en"
          | "fa"
          | "fi"
          | "fr"
          | "gl"
          | "hr"
          | "hu"
          | "it"
          | "ja"
          | "kr"
          | "la"
          | "lt"
          | "mk"
          | "nl"
          | "pl"
          | "pt"
          | "ro"
          | "ru"
          | "se"
          | "sk"
          | "sl"
          | "es"
          | "tr"
          | "ua"
          | "vi"
          | "zh_cn"
          | "zh_tw";
        /** **Mode**. *Example: html*. Determines format of response. Possible values are `xml` and `html`. If mode parameter is empty the format is `json` by default. */
        mode?: "json" | "xml" | "html";
      };
    };
    responses: {
      /** Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["200"];
        };
      };
      /** Not found response */
      404: {
        content: {
          "text/plain": string;
        };
      };
    };
  };
}

export interface external {}
